// Code generated by oto; DO NOT EDIT.

package tasks

import (
	"context"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"
)

type Service interface {
	BatchGet(context.Context, BatchGetRequest) (*BatchGetResponse, error)
	List(context.Context, ListRequest) (*ListResponse, error)
}

type serviceServer struct {
	server  *otohttp.Server
	service Service
}

// Register adds the Service to the otohttp.Server.
func RegisterService(server *otohttp.Server, service Service) {
	handler := &serviceServer{
		server:  server,
		service: service,
	}
	server.Register("Service", "BatchGet", handler.handleBatchGet)
	server.Register("Service", "List", handler.handleList)
}

func (s *serviceServer) handleBatchGet(w http.ResponseWriter, r *http.Request) {
	var request BatchGetRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.service.BatchGet(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *serviceServer) handleList(w http.ResponseWriter, r *http.Request) {
	var request ListRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.service.List(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type BatchGetRequest struct {
	IDs []int `json:"ids"`
}

type Task struct {
	ID       int    `json:"id"`
	Category string `json:"category"`
	Content  string `json:"content"`
}

type BatchGetResponse struct {
	Tasks []Task `json:"tasks"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type ListRequest struct {
	Category string `json:"category"`
}

type ListResponse struct {
	IDs []int `json:"ids"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
